<?xml version="1.0" encoding="utf-8"?>

<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="tasks/Microsoft.Sdc.Common.tasks" />

  <PropertyGroup>
	<BaseDirectory>$(MSBuildProjectDirectory)\..</BaseDirectory>
  </PropertyGroup>

  <PropertyGroup>
	<SourceFolder>$(BaseDirectory)\src</SourceFolder>
	<CSharpFiles>$(BaseDirectory)\src</CSharpFiles>
  </PropertyGroup>

  <ItemGroup>
	<CSharpFiles Include="$(BaseDirectory)\**\*.cs"/>
	<XmlFiles Include="$(BaseDirectory)\common\**\*.WeSayConfig"/>
  </ItemGroup>

  <UsingTask AssemblyFile="$(BaseDirectory)\bld\Palaso.BuildTasks.dll" TaskName="Split" />
  <Import Project="$(BaseDirectory)\bld\UpdateCsProjs.Targets"/>
  <Import Project="$(BaseDirectory)\bld\VersionInfo.Targets"/>

  <!-- From http://msbuildtasks.tigris.org/ -->
  <Import Project="$(MSBuildExtensionsPath)\MSBuildCommunityTasks\MSBuild.Community.Tasks.Targets"/>

  <!-- this is here to avoid the problem we were getting where we changed some assemblyinfo.cs, and teamcity did too... (need more).
	At one point, we reverted everything, but then that just threw away the artifact dependencies we want to suck in from, for example, palaso.  -->
  <Target Name="RevertSource">
	<SvnClient Command="revert" Arguments="$(BaseDirectory)/src --recursive"/>
  </Target>

  <Target Name="Compile">

	<CallTarget targets="UnzipMercurial"/>

	<MSBuild Projects="$(BaseDirectory)\src\WeSay.sln"
			 Targets="Rebuild"
			 Properties="Configuration=Debug" />

	<MSBuild Projects="$(BaseDirectory)\src\WeSay.sln"
			 Targets="Rebuild"
			 Properties="Configuration=Release" />
  </Target>

  <Target Name="UnzipMercurial">
	<Unzip ZipFileName="$(BaseDirectory)\lib\net2.0\Mercurial.zip"
		   TargetDirectory="$(BaseDirectory)\output\Release"/>
  </Target>

  <Target Name="Test">
	<!-- collect up the test dlls that were generated in the Compile step
	into the xTestAssemblies property-->
	<CreateItem Include="$(BaseDirectory)\output\Debug\*.tests.dll">
	  <Output TaskParameter="Include" ItemName="DebugTestAssemblies"/>
	</CreateItem>
	<CreateItem Include="$(BaseDirectory)\output\Release\*.tests.dll">
	  <Output TaskParameter="Include" ItemName="ReleaseTestAssemblies"/>
	</CreateItem>

	<MakeDir Directories="$(BaseDirectory)\output\TestResults\Debug\;
						  $(BaseDirectory)\output\TestResults\Release\"/>


	<!-- run the tests individually -->
	<!-- without path to Tool-->
	<NUnit OutputXmlFile="$(BaseDirectory)\output\TestResults\Debug\%(DebugTestAssemblies.Filename).xml"
		   Assemblies="%(DebugTestAssemblies.FullPath)"
		   ExcludeCategory="DictionaryServices"
		   WorkingDirectory="$(BaseDirectory)\output\Debug" Condition="$(NUnitPath)==''">
	</NUnit>
	<NUnit OutputXmlFile="$(BaseDirectory)\output\TestResults\Release\%(ReleaseTestAssemblies.Filename).xml"
		   Assemblies="%(ReleaseTestAssemblies.FullPath)"
		   ExcludeCategory="DictionaryServices"
		   WorkingDirectory="$(BaseDirectory)\output\Release" Condition="$(NUnitPath)==''">
	</NUnit>

	<!-- with explicit path to Tool-->
	<NUnit OutputXmlFile="$(BaseDirectory)\output\TestResults\Debug\%(DebugTestAssemblies.Filename).xml"
		   Assemblies="%(DebugTestAssemblies.FullPath)"
		   ExcludeCategory="DictionaryServices"
		   WorkingDirectory="$(BaseDirectory)\output\Debug"
		   ToolPath="$(NUnitPath)" Condition="$(NUnitPath)!=''">
	</NUnit>
	<NUnit OutputXmlFile="$(BaseDirectory)\output\TestResults\Release\%(ReleaseTestAssemblies.Filename).xml"
		   Assemblies="%(ReleaseTestAssemblies.FullPath)"
		   ExcludeCategory="DictionaryServices"
		   WorkingDirectory="$(BaseDirectory)\output\Release"
		   ToolPath="$(NUnitPath)" Condition="$(NUnitPath)!= ''">
	</NUnit>

  </Target>


  <ItemGroup>
	<SampleFiles Include="$(BaseDirectory)\SampleProjects\src\**\*.*"
				 Exclude="$(BaseDirectory)\SampleProjects\src\**\.svn\*.*"/>
  </ItemGroup>


  <ItemGroup>
	<SampleProjects Include="$(BaseDirectory)\SampleProjects\src\*.*"
					Exclude="$(BaseDirectory)\SampleProjects\src\.svn"/>
  </ItemGroup>

  <Target Name="CreateSample">
	<Copy SourceFiles="@(SampleFiles)"
		  DestinationFolder="$(BaseDirectory)\SampleProjects\%(RecursiveDir)" />
  </Target>


  <Target Name="LauchWeSayWithSample">
	<!-- formerly VerifySample -->
	<CreateItem Include="$(BaseDirectory)\SampleProjects\**\*.lift"
				Exclude="$(BaseDirectory)\SampleProjects\src\**\*.*;
				$(BaseDirectory)\SampleProjects\PRETEND\**\*.*">
	  <Output TaskParameter="Include" ItemName="WeSayFiles"/>
	</CreateItem>

	<!-- open using wesay -->
	<Exec Command='"$(BaseDirectory)\output\Release\WeSay.App.exe" "%(WeSayFiles.FullPath)"'
		  WorkingDirectory="$(BaseDirectory)\output\Release"/>
  </Target>


  <UsingTask AssemblyFile="$(BaseDirectory)\bld\Palaso.BuildTasks.dll" TaskName="MakePot" />
  <Target Name="MakePotFile">
	<MakePot ProjectId="WeSay"
			 OutputFile="$(BaseDirectory)\common\WeSay.pot"
			 MsdIdBugsTo="hattonjohn@gmail.com"
			 XmlFiles="@(XmlFiles)"
			 XPathToStrings="//label | //description[not(@UseInConstructor='false')]"
			 CSharpFiles="@(CSharpFiles)">
	</MakePot>
  </Target>

  <UsingTask AssemblyFile="$(BaseDirectory)\bld\Palaso.BuildTasks.dll" TaskName="MakeWixForDirTree" />

  <Target Name="MakeWixForPoFiles">
	<MakeWixForDirTree
				DirectoryReferenceId="common"
				ComponentGroupId="PoFiles"
				RootDirectory="$(BaseDirectory)\common"
				OutputFilePath="$(BaseDirectory)\src\Installer\GeneratedPOFiles.wxs"
				MatchRegExPattern="\.po$">
	  <Output TaskParameter="OutputFilePath" ItemName="Compile" />
	</MakeWixForDirTree>
  </Target>

  <Target Name="MakeWixForMercurial">
	<MakeWixForDirTree
				DirectoryReferenceId="mercurial"
				ComponentGroupId="Mercurial"
				RootDirectory="$(BaseDirectory)\output\release\mercurial"
				OutputFilePath="$(BaseDirectory)\src\Installer\GeneratedMercurial.wxs"
				MatchRegExPattern=".*">
	  <Output TaskParameter="OutputFilePath" ItemName="Compile" />
	</MakeWixForDirTree>
  </Target>

  <Target Name="MakeWixForTemplates">
	<MakeWixForDirTree
				DirectoryReferenceId="TemplatesDir"
				ComponentGroupId="templates"
				RootDirectory="$(BaseDirectory)\templates"
				OutputFilePath="$(BaseDirectory)\src\Installer\GeneratedTemplateFiles.wxs"
				MatchRegExPattern=".*"
				>
	  <Output TaskParameter="OutputFilePath" ItemName="Compile" />
	</MakeWixForDirTree>
  </Target>

  <Target Name="InstallerNoGenerationTest">
	<Split Input="$(BUILD_NUMBER)" Delimiter="-" OutputSubString="0">
	  <Output TaskParameter="ReturnValue" PropertyName="Revision" />
	</Split>
	<CreateProperty Value="$(Major).$(Minor).$(Revision)">
	  <Output PropertyName="Version" TaskParameter="Value"/>
	</CreateProperty>
	<Message Text="Version: $(Version)" />

	<CallTarget targets="MakeWixForTemplates"/>
	<CallTarget targets="MakeWixForMercurial"/>

	<!-- set the version number in the installer configuration program.  I'm sure there's a way to just send in the variables rather than this brute-force
		changing of the script, but I haven't figured that out. -->
	<FileUpdate Files="$(BaseDirectory)\src\Installer\Installer.wxs" Regex="Property_ProductVersion = \&quot;.*\&quot;"
				ReplacementText ="Property_ProductVersion = &quot;$(Version)&quot;" />


	<Message Text="Making Installer Version: $(Version)"/>

	<MSBuild Projects="$(BaseDirectory)\src\Installer\Installer.wixproj"/>

	<!-- remove an existing one with the same name, if necessary -->
	<Delete Files="$(BaseDirectory)\output\installer\WeSayInstaller.$(Version).msi" TreatErrorsAsWarnings="false" />

	<Move SourceFiles="$(BaseDirectory)\output\installer\WeSayInstaller.msi"
			DestinationFiles="$(BaseDirectory)\output\installer\WeSayInstaller.$(Version).msi"/>
  </Target>

  <!-- for use on a dev machine to test installer script -->
  <Target Name="InstallerWithBogusBuildNumber">
	<CreateProperty Value="1234:abcd">
	  <Output PropertyName="BUILD_NUMBER" TaskParameter="Value"/>
	</CreateProperty>
	<CallTarget Targets="Install"/>
  </Target>

	<Target Name="Installer">
	<Split Input="$(BUILD_NUMBER)" Delimiter="-" OutputSubString="0">
	  <Output TaskParameter="ReturnValue" PropertyName="Revision" />
	</Split>
	<CreateProperty Value="$(Major).$(Minor).$(Revision)">
	  <Output PropertyName="Version" TaskParameter="Value"/>
	</CreateProperty>
	<Message Text="Version: $(Version)" />

	<CallTarget targets="MakePotFile; MakeWixForPoFiles"/>
	<CallTarget targets="MakeWixForTemplates"/>
	<CallTarget targets="MakeWixForMercurial"/>

	  <!-- set the version number in the installer configuration program.  I'm sure there's a way to just send in the variables rather than this brute-force
		changing of the script, but I haven't figured that out. -->
	<FileUpdate Files="$(BaseDirectory)\src\Installer\Installer.wxs" Regex="Property_ProductVersion = \&quot;.*\&quot;"
				ReplacementText ="Property_ProductVersion = &quot;$(Version)&quot;" />


	<Message Text="Making Installer Version: $(Version)"/>

	<MSBuild Projects="$(BaseDirectory)\src\Installer\Installer.wixproj"/>

	<!-- remove an existing one with the same name, if necessary -->
	<Delete Files="$(BaseDirectory)\output\installer\WeSayInstaller.$(Version).msi" TreatErrorsAsWarnings="false" />

	<Move SourceFiles="$(BaseDirectory)\output\installer\WeSayInstaller.msi"
			DestinationFiles="$(BaseDirectory)\output\installer\WeSayInstaller.$(Version).msi"/>
  </Target>


  <Target Name="Upload">
	<Split Input="$(BUILD_NUMBER)" Delimiter="-" OutputSubString="0">
	  <Output TaskParameter="ReturnValue" PropertyName="Revision" />
	</Split>
	<CreateProperty Value="$(Major).$(Minor).$(Revision)">
	  <Output PropertyName="Version" TaskParameter="Value"/>
	</CreateProperty>
	<Message Text="Version: $(Version)" />

	<Exec Command='"c:\program files\cwRsync\bin\rsync.exe" -vz -e"\"c:\program files\cwRsync\bin\ssh\" -oUserKnownHostsFile=C:\BuildAgent\conf\known_hosts -oIdentityFile=C:\BuildAgent\conf\bob.key -l bob" "output\installer\WeSayInstaller.$(Version).msi" bob@wesay.org:/var/www/downloads/WeSayInstaller.$(Version).msi'
		   WorkingDirectory="$(BaseDirectory)" />
  </Target>

  <Target Name="Mail">
	<Split Input="$(BUILD_NUMBER)" Delimiter="-" OutputSubString="0">
	  <Output TaskParameter="ReturnValue" PropertyName="Revision" />
	</Split>
	<CreateProperty Value="$(Major).$(Minor).$(Revision)">
	  <Output PropertyName="Version" TaskParameter="Value"/>
	</CreateProperty>
	<Message Text="Version: $(Version)" />

	<!-- Mail email to list-->
	<Mail Body="WeSay version $(Version) has been deployed. Check it out."
		  SmtpServer="wesay.org"
		  Username="$(user)"
		  Password="$(password)"
		  From="$(user)@wesay.org"
		  Subject="New version of WeSay ($(Version))"
		  To="wesay@googlegroups.com"/>
  </Target>

  <Target Name="Build">
	<CallTarget Targets="UpdateCsProjs;
						 Compile;
						 Test;
						 CreateSample;
						 Installer;
						 Upload"/>
	<Message Text="Build Complete"/>
  </Target>

  <Target Name="Clean">
	<CleanFolder Path="$(BaseDirectory)\output" Force="true" />
	<MSBuild Projects="$(BaseDirectory)\src\WeSay.sln"
			 Targets="Clean"
			 Properties="Configuration=Debug" />
	<MSBuild Projects="$(BaseDirectory)\src\WeSay.sln"
			 Targets="Clean"
			 Properties="Configuration=Release" />
  </Target>

</Project>
